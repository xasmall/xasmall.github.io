<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XASMALL WORKSPACE</title>
  
  <subtitle>记录生活琐事</subtitle>
  <link href="http://119.29.194.249/atom.xml" rel="self"/>
  
  <link href="http://119.29.194.249/"/>
  <updated>2022-11-14T03:05:57.980Z</updated>
  <id>http://119.29.194.249/</id>
  
  <author>
    <name>xasmall</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>clash配置代理规则</title>
    <link href="http://119.29.194.249/2022/11/14/clash%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99/"/>
    <id>http://119.29.194.249/2022/11/14/clash%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86%E8%A7%84%E5%88%99/</id>
    <published>2022-11-14T02:59:04.000Z</published>
    <updated>2022-11-14T03:05:57.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="clash代理配置问题"><a class="markdownIt-Anchor" href="#clash代理配置问题"></a> clash代理配置问题</h2><p>由于经常使用github，但是由于某些原因，不使用一些工具就经常断断续续，使用了工具又会出现git push不上去<br>所以设置git走代理</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> http<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7890</span><br>git config <span class="hljs-attr">--global</span> https<span class="hljs-selector-class">.proxy</span> http:<span class="hljs-comment">//127.0.0.1:7890</span><br></code></pre></td></tr></table></figure><p>7890就是代理端口啦<br>通过设置git代理，显然使用git的速度变得好了，现在又出现了一个问题<br>bing搜索自从更新后，使用代理搜索就会出现重定向次数过多的问题<br>我们需要设置clash代理规则，使得它不走代理</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">parsers:</span> <span class="hljs-comment"># array</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">url:</span> <span class="hljs-string">https://sub-2.suki.best/sub?target=clash&amp;new_name=true&amp;url=https%3A%2F%2Fsockboom.me%2Flink%2FpPeKHmAVsGHoImBD&amp;filename=Sockboom&amp;udp=true&amp;config=https%3A%2F%2Fconfig.sub.suki.best%2Fsubconfig.ini</span><br>    <span class="hljs-attr">yaml:</span><br>      <span class="hljs-attr">prepend-rules:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-SUFFIX,cn.bing.com,DIRECT</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">DOMAIN-SUFFIX,www.bing.com,DIRECT</span><br></code></pre></td></tr></table></figure><p>上图中url是你使用的配置的url<br>DIRECT表示不走代理，这样设置好，你就可以好好使用啦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;clash代理配置问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#clash代理配置问题&quot;&gt;&lt;/a&gt; clash代理配置问题&lt;/h2&gt;
&lt;p&gt;由于经常使用github，但是由于某些原因，不使用一些工具就经常断断续续，使用了工具又会出</summary>
      
    
    
    
    <category term="代理" scheme="http://119.29.194.249/categories/%E4%BB%A3%E7%90%86/"/>
    
    
    <category term="clash" scheme="http://119.29.194.249/tags/clash/"/>
    
  </entry>
  
  <entry>
    <title>redis-链表</title>
    <link href="http://119.29.194.249/2022/06/11/redis-%E9%93%BE%E8%A1%A8/"/>
    <id>http://119.29.194.249/2022/06/11/redis-%E9%93%BE%E8%A1%A8/</id>
    <published>2022-06-11T02:23:07.000Z</published>
    <updated>2022-11-14T02:32:59.818Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis-链表"><a class="markdownIt-Anchor" href="#redis-链表"></a> redis-链表</h3><p>由于redis使用的C语言并没有内置这种数据结构，所以redis构建了自己的链表实现</p><p>链表在redis中的应用十分广泛，列表键的底层实现之一就是链表，当一个列表键包含了数量很多的元素又或者列表中的元素都是比较长的字符串时，redis就会使用链表作为列表键的底层实现</p><p>链表节点实现：本质上是一个双端链表</p><figure class="highlight gauss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs gauss">typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">listNode</span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-type">listNode</span> *prev;<br><span class="hljs-keyword">struct</span> <span class="hljs-type">listNode</span> *next;<br>void *value;<br>&#125;listNode;<br></code></pre></td></tr></table></figure><p>链表的结构体：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> list&#123;<br>listNode *head;<br>listNode *tail;<br><span class="hljs-comment">// 链表所包含的节点数量</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len;<br><span class="hljs-comment">// 节点值复制函数</span><br><span class="hljs-type">void</span> *(*dup)(<span class="hljs-type">void</span> *ptr);<br><span class="hljs-comment">// 节点值释放函数</span><br><span class="hljs-type">void</span> *(free)(<span class="hljs-type">void</span> *ptr);<br><span class="hljs-comment">// 节点值对比函数</span><br><span class="hljs-type">int</span> (*match)(<span class="hljs-type">void</span> *ptr,<span class="hljs-type">void</span> *key);<br>&#125;<br></code></pre></td></tr></table></figure><p>redis的链表实现特性：</p><p>1.双端</p><p>2.无环: 表头节点的prev指针和表尾节点的tail指针都指向null,对链表的访问以null为终点</p><p>3.多态：void*保存节点的值，可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同的值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;redis-链表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#redis-链表&quot;&gt;&lt;/a&gt; redis-链表&lt;/h3&gt;
&lt;p&gt;由于redis使用的C语言并没有内置这种数据结构，所以redis构建了自己的链表实现&lt;/p&gt;
&lt;p&gt;链表在r</summary>
      
    
    
    
    <category term="Redis" scheme="http://119.29.194.249/categories/Redis/"/>
    
    
    <category term="redis" scheme="http://119.29.194.249/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-简单动态字符串</title>
    <link href="http://119.29.194.249/2022/06/11/redis-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://119.29.194.249/2022/06/11/redis-%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-06-11T02:06:05.000Z</published>
    <updated>2022-11-14T02:32:59.818Z</updated>
    
    <content type="html"><![CDATA[<h4 id="redis-简单动态字符串"><a class="markdownIt-Anchor" href="#redis-简单动态字符串"></a> redis-简单动态字符串</h4><p>SDS:</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">struct sdshdr&#123;<br>int len; <span class="hljs-regexp">//</span> SDS所保存字符串的长度<br><br>int free; <span class="hljs-regexp">//</span>记录buf数组中未使用字节的数量<br><br>char buf[]; <span class="hljs-regexp">//</span>字节数组，用于保存字符串<br><br><span class="hljs-regexp">//</span> SDS遵循C字符串以空字符结尾的惯例，保存空字符的<span class="hljs-number">1</span>字节(<span class="hljs-string">&#x27;\0&#x27;</span>)不计算再SDS的len属性里面，并且为空字符分类额外的<span class="hljs-number">1</span>字节空间，以及添加空字符到字符串末尾等操作都是由SDS函数自动完成的<br>&#125;<br></code></pre></td></tr></table></figure><p>SDS遵循空字符串结尾这一惯例的好处，就是SDS可以重用一部分C字符串函数里面的函数</p><h5 id="sds与c字符串的区别"><a class="markdownIt-Anchor" href="#sds与c字符串的区别"></a> SDS与C字符串的区别</h5><p>1.常数复杂度获取字符串的长度</p><p>SDS保存了len属性，获取字符串长度的时间复杂度为O(1)</p><p>// 设置和更新SDS长度的工作是由SDS的API在执行时自动完成的，使用SDS无需进行任何修改长度的工作</p><p>2.杜绝缓冲区溢出</p><p>C字符串不记录自身长度带来的另一个问题就是容易造成缓冲区溢出，比如使用strcat,strcpy等函数</p><p>当SDS的API需要对SDS进行修改时，API会检查SDS的空间是否满足修改所需的要求，如果不满足，API会自动将SDS的空间扩展到修改所需的大小，然后才执行实际的修改操作</p><p>比如：SDS中的sdcat函数</p><p>3.减少修改字符串时带来的内存重分配次数</p><p>SDS通过使用未使用空间解除了字符串长度和底层数组长度之间的关联</p><p><strong>所以SDS中buf数组的长度不一定是字符数量+1</strong></p><h6 id="空间预分配当需要对sds进行空间扩展的时候程序不仅会为sds分配修改所必需要的空间还会为sds分配额外的未使用空间"><a class="markdownIt-Anchor" href="#空间预分配当需要对sds进行空间扩展的时候程序不仅会为sds分配修改所必需要的空间还会为sds分配额外的未使用空间"></a> 空间预分配：当需要对SDS进行空间扩展的时候，程序不仅会为SDS分配修改所必需要的空间，还会为SDS分配额外的未使用空间</h6><ol><li>如果修改之后，SDS的长度小于1MB,那么程序分配和len属性同样大小的未使用空间</li><li>如果SDS长度大于等于1MB,那么程序会分配1MB的未使用空间</li></ol><h6 id="惰性空间释放当sds需要缩短sds保存的字符串时程序并不立即使用内存重分配来回收缩短后多出来的字节而是使用free属性来讲这些数量记录下来等待将来使用"><a class="markdownIt-Anchor" href="#惰性空间释放当sds需要缩短sds保存的字符串时程序并不立即使用内存重分配来回收缩短后多出来的字节而是使用free属性来讲这些数量记录下来等待将来使用"></a> 惰性空间释放：当SDS需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性来讲这些数量记录下来，等待将来使用</h6><p>通过惰性空间释放，SDS避免了缩短字符串时所需的内存重分配操作，并为将来可能由的增长操作提供了优化，</p><p>SDS也提供了API，让我们在有需要的时候，真正释放SDS的未使用空间</p><p>4.二进制安全</p><p>C字符串中的字符必须符合某种编码，并且处理字符串的末尾之外，字符串里面不能包含空字符，否则最先被程序读入的空字符串被误认为是字符串结尾，这些限制使得C字符串只能保存文本数量，不能保存图片、音频、压缩文件这样的二进制数据</p><p>SDS使用len属性的值而不是空字符来判断字符串是否结束</p><p>5.兼容C字符函数</p><p>SDS总会在buf数组分配空间时多分配一个字节来容纳这个空字符，这是为了让那些保存<strong>文本数据</strong>的SDS可以重用一部分string.h库定义的函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;redis-简单动态字符串&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#redis-简单动态字符串&quot;&gt;&lt;/a&gt; redis-简单动态字符串&lt;/h4&gt;
&lt;p&gt;SDS:&lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;</summary>
      
    
    
    
    <category term="Redis" scheme="http://119.29.194.249/categories/Redis/"/>
    
    
    <category term="redis" scheme="http://119.29.194.249/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>go语言学习-赋值</title>
    <link href="http://119.29.194.249/2022/06/09/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E8%B5%8B%E5%80%BC/"/>
    <id>http://119.29.194.249/2022/06/09/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E8%B5%8B%E5%80%BC/</id>
    <published>2022-06-08T16:50:16.000Z</published>
    <updated>2022-11-14T02:32:59.817Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// go语言的赋值操作</span><br><br><span class="hljs-keyword">type</span> Books <span class="hljs-keyword">struct</span> &#123;<br>title   <span class="hljs-type">string</span><br>author  <span class="hljs-type">string</span><br>subject <span class="hljs-type">string</span><br>book_id <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 普通赋值方法</span><br><span class="hljs-keyword">var</span> (<br>x <span class="hljs-type">int</span><br>y *<span class="hljs-type">bool</span> <span class="hljs-comment">//声明一个bool类型的指针</span><br>)<br>x = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> t <span class="hljs-type">bool</span> = <span class="hljs-literal">false</span><br><span class="hljs-comment">// 指针在进行操作之前必须赋值，这个地址应该是一个变量的地址</span><br>y = &amp;t<br>*y = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> b Books<br>b.author = <span class="hljs-string">&quot;张三&quot;</span><br>b.book_id = <span class="hljs-number">1</span><br>b.subject = <span class="hljs-string">&quot;普通图书&quot;</span><br>b.title = <span class="hljs-string">&quot;go语言圣经&quot;</span><br>fmt.Println(x, *y, b)<br><br>&#125;<br><br><span class="hljs-comment">// 求最大公约数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gcd</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>fmt.Println(x, y)<br><span class="hljs-keyword">for</span> y != <span class="hljs-number">0</span> &#123;<br>x, y = y, x%y<br>&#125;<br><span class="hljs-keyword">return</span> x<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//元组赋值方法,允许同时更新多个变量的值，在赋值之前，赋值语句右边的所有表达式将会被先进行求值，然后再统一更新左边对应变量的值</span><br><span class="hljs-keyword">var</span> x, y <span class="hljs-type">int</span><br>x, y = <span class="hljs-number">1</span>, <span class="hljs-number">3</span><br>fmt.Println(x, y)<br>x, y = y, x<br>fmt.Println(x, y)<br>&#125;<br><br><span class="hljs-comment">//Fibonacci 数列</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fib</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>x, y := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>x, y = y, x+y<br>&#125;<br><span class="hljs-keyword">return</span> x<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// test1()</span><br><span class="hljs-comment">// test2()</span><br>fmt.Println(gcd(<span class="hljs-number">16</span>, <span class="hljs-number">8</span>))<br>fmt.Println(fib(<span class="hljs-number">3</span>))<br><span class="hljs-comment">// fmt.Println(&quot;hello&quot;)</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;code-wrapper&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    <category term="go" scheme="http://119.29.194.249/categories/go/"/>
    
    
    <category term="go" scheme="http://119.29.194.249/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>java方法CompareTo引发的错误</title>
    <link href="http://119.29.194.249/2022/06/08/java%E6%96%B9%E6%B3%95CompareTo%E5%BC%95%E5%8F%91%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>http://119.29.194.249/2022/06/08/java%E6%96%B9%E6%B3%95CompareTo%E5%BC%95%E5%8F%91%E7%9A%84%E9%94%99%E8%AF%AF/</id>
    <published>2022-06-08T10:44:14.000Z</published>
    <updated>2022-11-14T02:32:59.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="java-compareto方法"><a class="markdownIt-Anchor" href="#java-compareto方法"></a> java CompareTo方法</h3><p>记录一下今天刷力扣的时候使用Arrays.sort时出现的错误</p><figure class="highlight oxygene"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs oxygene">Comparison <span class="hljs-keyword">method</span> <span class="hljs-title function_">violates</span> <span class="hljs-title function_">its</span> <span class="hljs-title function_">general</span> <span class="hljs-title function_">contract</span>!<br></code></pre></td></tr></table></figure><p>这个问题的意思就是说比较顺序需要满足可逆比较</p><p>我们看一下java实现的CompareTo方法</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(<span class="hljs-type">String</span> anotherString)</span> </span>&#123;<br>    <span class="hljs-type">int</span> len1 = value.length;<br>    <span class="hljs-type">int</span> len2 = anotherString.value.length;<br>    <span class="hljs-type">int</span> lim = Math.<span class="hljs-built_in">min</span>(len1, len2);<br>    <span class="hljs-type">char</span> v1[] = value;<br>    <span class="hljs-type">char</span> v2[] = anotherString.value;<br><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (k &lt; lim) &#123;<br>        <span class="hljs-type">char</span> c1 = v1[k];<br>        <span class="hljs-type">char</span> c2 = v2[k];<br>        <span class="hljs-keyword">if</span> (c1 != c2) &#123;<br>            <span class="hljs-keyword">return</span> c1 - c2;<br>        &#125;<br>        k++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len1 - len2;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个compareTo方法中，从前到后比较第一个不同的字符，走到其中一个没有字符后，比较两者的长度<br>那么这个里面的一个东西时<code>len1 - len2</code> 当两个字符串相等的时候，需要返回0，特此注意一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;java-compareto方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-compareto方法&quot;&gt;&lt;/a&gt; java CompareTo方法&lt;/h3&gt;
&lt;p&gt;记录一下今天刷力扣的时候使用Arrays.sort时出现的错</summary>
      
    
    
    
    <category term="开发" scheme="http://119.29.194.249/categories/%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="java" scheme="http://119.29.194.249/tags/java/"/>
    
    <category term="bug修复" scheme="http://119.29.194.249/tags/bug%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>线段树01</title>
    <link href="http://119.29.194.249/2022/06/06/%E7%BA%BF%E6%AE%B5%E6%A0%9101/"/>
    <id>http://119.29.194.249/2022/06/06/%E7%BA%BF%E6%AE%B5%E6%A0%9101/</id>
    <published>2022-06-06T14:56:22.000Z</published>
    <updated>2022-11-14T02:32:59.816Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">SegmentTree</span>&#123;<br>    <span class="hljs-comment">// 朴素版本的线段树</span><br>    <span class="hljs-comment">// 假设全部以区间和为例</span><br>    static <span class="hljs-built_in">int</span>[] a;<br>    static <span class="hljs-built_in">int</span>[] f;<br>    <span class="hljs-keyword">public</span> static <span class="hljs-built_in">void</span> buildTree(<span class="hljs-built_in">int</span> k,<span class="hljs-built_in">int</span> l,<span class="hljs-built_in">int</span> r)&#123;<br>        <span class="hljs-comment">// 如果当前的区间，左端点等于右端点，那么这个区间的和为a[l]或a[r]</span><br>        <span class="hljs-keyword">if</span>(l == r)&#123;<br>            f[k] = a[l];<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">int</span> m = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// left和right为当前区间的左孩子区间的索引和右孩子区间的索引</span><br>        <span class="hljs-built_in">int</span> left  = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> right = <span class="hljs-number">2</span> * k + <span class="hljs-number">2</span>;<br><br>        <span class="hljs-comment">// 递归的创建左右子区间</span><br>        buildTree(left, l, m);<br>        buildTree(right, m+<span class="hljs-number">1</span>, r);<br><br>        <span class="hljs-comment">// 当前区间的和为左孩子区间和右孩子区间的和</span><br>        f[k] = f[left] + f[right];<br>    &#125;<br><br>    <span class="hljs-comment">// 讲a[x] 修改成y</span><br>    <span class="hljs-keyword">public</span> static <span class="hljs-built_in">void</span> update(<span class="hljs-built_in">int</span> k, <span class="hljs-built_in">int</span> l, <span class="hljs-built_in">int</span> r, <span class="hljs-built_in">int</span> x, <span class="hljs-built_in">int</span> y)&#123;<br>        <span class="hljs-keyword">if</span>(l == r)&#123;<br>            a[l] = y;<br>            f[k] = y;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">int</span> m = l + r &gt;&gt; <span class="hljs-number">1</span>, left = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>, right = <span class="hljs-number">2</span> * k + <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(x&lt;=m)&#123;<br>                update(left, l, m, x, y);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                update(right, m+<span class="hljs-number">1</span>, r, x, y);<br>            &#125;<br>            <br>            f[k] = f[right] + f[left];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询区间[s----t]之间的区间和</span><br>    <span class="hljs-keyword">public</span> static <span class="hljs-built_in">int</span> query(<span class="hljs-built_in">int</span> k, <span class="hljs-built_in">int</span> l, <span class="hljs-built_in">int</span> r, <span class="hljs-built_in">int</span> s, <span class="hljs-built_in">int</span> t)&#123;<br>        <span class="hljs-keyword">if</span>(l == s &amp;&amp; r == t) <span class="hljs-keyword">return</span> f[k];<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">int</span> m = l + r &gt;&gt; <span class="hljs-number">1</span>, left = <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>, right = <span class="hljs-number">2</span> * k + <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(s &gt; m)&#123;<br>                <span class="hljs-comment">// 需要查询的区间和在当前区间的右边</span><br>                <span class="hljs-keyword">return</span> query(right, m+<span class="hljs-number">1</span>, r, s, t);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(t &lt;= m)&#123;<br>                    <span class="hljs-comment">// 需要查询的区间和在当前区间的左边</span><br>                    <span class="hljs-keyword">return</span> query(left, l, m, s, t);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 需要查询的区间在这两个区间的中间，左边有一部分，右边有一部分</span><br>                    <span class="hljs-keyword">return</span> query(left, l, m, s, m) + query(right, m+<span class="hljs-number">1</span>, r, m+<span class="hljs-number">1</span>, t);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> static <span class="hljs-built_in">void</span> main(String[] args)&#123;<br>        <span class="hljs-comment">// 静态测试一下</span><br>        a = new <span class="hljs-built_in">int</span>[]&#123; <span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span> &#125;;<br>        <br>        <span class="hljs-comment">// f数组可以开大小，一般为4n</span><br>        f = new <span class="hljs-built_in">int</span>[<span class="hljs-number">50</span>];<br><br>        buildTree(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br><br>        <span class="hljs-comment">// 输出一下数据</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            System.<span class="hljs-keyword">out</span>.print(f[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.<span class="hljs-keyword">out</span>.println();<br>        <span class="hljs-comment">// 未修改之前为 13 &#123;1，5，7&#125;</span><br>        System.<span class="hljs-keyword">out</span>.println(query(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<br><br>        update(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">20</span>;i++)&#123;<br>            System.<span class="hljs-keyword">out</span>.print(f[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>        System.<span class="hljs-keyword">out</span>.println();<br><br>        <span class="hljs-comment">// 修改之后变成15 &#123;3，5，7&#125;</span><br>        System.<span class="hljs-keyword">out</span>.println(query(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;code-wrapper&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="线段树" scheme="http://119.29.194.249/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>acwing基础算法之kmp</title>
    <link href="http://119.29.194.249/2022/05/29/kmp/"/>
    <id>http://119.29.194.249/2022/05/29/kmp/</id>
    <published>2022-05-29T07:38:04.000Z</published>
    <updated>2022-11-14T02:32:59.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>给定一个模式串 S，以及一个模板串 P，所有字符串中只包含大小写英文字母以及阿拉伯数字。<br>模板串 P 在模式串 S 中多次作为子串出现。<br>求出模板串 P 在模式串 S 中所有出现的位置的起始下标。<br><strong>输入格式</strong><br>第一行输入整数 N，表示字符串 P 的长度。<br>第二行输入字符串 P。<br>第三行输入整数 M，表示字符串 S 的长度。<br>第四行输入字符串 S。<br><strong>输出格式</strong><br>共一行，输出所有出现位置的起始下标（下标从 0 开始计数），整数之间用空格隔开。</p><h4 id="样例"><a class="markdownIt-Anchor" href="#样例"></a> 样例</h4><p><strong>输入格式</strong></p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs">3<br>aba<br>5<br>ababa<br></code></pre></td></tr></table></figure><p><strong>输出格式</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="解析"><a class="markdownIt-Anchor" href="#解析"></a> 解析</h3><p><img src="/2022/05/29/kmp/kmp_Page1.png" alt="kmp_Page1.png"><br><img src="/2022/05/29/kmp/kmp_Page2.png" alt="kmp_Page2.png"><br><img src="/2022/05/29/kmp/kmp_Page3.png" alt="kmp_Page3.png"></p><h2 id="java代码"><a class="markdownIt-Anchor" href="#java代码"></a> java代码</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> Main&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> n,m;<br>    <span class="hljs-keyword">static</span> String P,S;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> getNext(<span class="hljs-keyword">char</span>[] p)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>,j=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>            <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">0</span>&amp;&amp;p[i]!=p[j+<span class="hljs-number">1</span>]) j = <span class="hljs-keyword">next</span>[j];<br>            <span class="hljs-keyword">if</span>(p[i]==p[j+<span class="hljs-number">1</span>]) j++;<br>            <span class="hljs-keyword">next</span>[i] = j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args)&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br>        n = sc.nextInt();<br>        P = sc.<span class="hljs-keyword">next</span>();<br>        m = sc.nextInt();<br>        S = sc.<span class="hljs-keyword">next</span>();<br>        <span class="hljs-keyword">next</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[P.length()+<span class="hljs-number">5</span>];<br>        P = <span class="hljs-string">&quot;1&quot;</span>+P;<br>        S = <span class="hljs-string">&quot;1&quot;</span>+S;<br>        <span class="hljs-keyword">char</span>[] p = P.toCharArray();<br>        <span class="hljs-keyword">char</span>[] s = S.toCharArray();<br>        getNext(p);<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;i&lt;=m;i++)&#123;<br>            <span class="hljs-keyword">while</span>(j!=<span class="hljs-number">0</span>&amp;&amp;s[i]!=p[j+<span class="hljs-number">1</span>]) j = <span class="hljs-keyword">next</span>[j];<br>            <span class="hljs-keyword">if</span>(s[i]==p[j+<span class="hljs-number">1</span>]) j++;<br>            <span class="hljs-keyword">if</span>(j==n)&#123;<br>                sb.<span class="hljs-keyword">append</span>(i-j);<br>                sb.<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot; &quot;</span>);<br>                j = <span class="hljs-keyword">next</span>[j];<br>            &#125;<br>        &#125;<br>        System.out.<span class="hljs-keyword">println</span>(sb.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目描述&quot;&gt;&lt;/a&gt; 题目描述&lt;/h3&gt;
&lt;p&gt;给定一个模式串 S，以及一个模板串 P，所有字符串中只包含大小写英文字母以及阿拉伯数字。&lt;br&gt;
模板串 P 在模式串 S 中多次作</summary>
      
    
    
    
    
    <category term="kmp" scheme="http://119.29.194.249/tags/kmp/"/>
    
  </entry>
  
  <entry>
    <title>大数据之hash</title>
    <link href="http://119.29.194.249/2022/05/27/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8Bhash/"/>
    <id>http://119.29.194.249/2022/05/27/%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B9%8Bhash/</id>
    <published>2022-05-27T14:36:12.000Z</published>
    <updated>2022-11-14T02:32:59.812Z</updated>
    
    <content type="html"><![CDATA[<p>jaccard相似度：用来描述两个集合间的相似度</p><p>jaccard(A，B) = (A^B)/(AUB)，即A与B交集的元素个数除以A与B并集的元素个数</p><p>K-single: 假如我们把一篇文章看成一个长的字符串，那么k-single就是这篇文章中长度为k的任意字符子串，一篇文章就是很多个不同的k-single的集合</p><p>例如 文章内容为&quot;abcdabd&quot;，k = 2 ,那么这篇文章中所有的k-single组成的集合为{ab,bc,cd,da,bd}</p><p>通过k-single的方式来表示每篇文章，然后通过判断每篇文章中single集合中相同元素的个数，可以得到文章的相似度</p><p>问题：以single的方式来存文章会消耗大量的内存</p><p>特征矩阵：特征矩阵的一列就对应一个集合，所有的行加起来就是所有集合元素的全集；如果集合中有这个元素，则矩阵中对应位置为1，否则为0</p><p>例子：假设现在有4个集合，</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">S1</span>=&#123;a,d&#125; <span class="hljs-built_in">S2</span>=&#123;c&#125; <span class="hljs-built_in">S3</span>=&#123;<span class="hljs-keyword">b,d,e&#125; </span><span class="hljs-built_in">S4</span>=&#123;a,c,d&#125;<br></code></pre></td></tr></table></figure><p>全集</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">U</span> =&#123;a,b,c,d,e&#125;<br></code></pre></td></tr></table></figure><p>特征矩阵表示如下：</p><table><thead><tr><th></th><th style="text-align:center">S1</th><th style="text-align:center">S2</th><th style="text-align:center">S3</th><th style="text-align:center">S4</th></tr></thead><tbody><tr><td>a</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td>b</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td>c</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td>d</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td>e</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>mini Hash(最小hash)</p><p>为了计算最小hash,首先对特征矩阵的行进行打乱（即调整行与行之间的位置），这个打乱是随机的。</p><p>然后某一列的最小hash值就等于打乱后第一个值为1的行所在的行号，行号从0开始</p><p><strong>最小hash与jaccard相似度，经过打乱后的两个集合计算得到的最小哈希值相等的概率等于这两个集合的jacccard相似度</strong></p><p>最小哈希签名：当我们用多个随机打乱（假设为n个，分别为h1,h2,…,hn）来处理特征矩阵时，然后计算打乱后的这n个矩阵的最小哈希值，对于每个集合，都会有n个哈希值，这n个哈希值可以组成一个列向量[h1(S1),h2(S1),…,hn(Sn)]，如果有m个集合，就会有m个列向量，这m个列向量就会组成一个矩阵，这个矩阵就是特征矩阵的签名矩阵</p><p>最小签名的计算：</p><p>初始时，设置所有的sig(i,c)初始化为inf（无穷大）</p><p>先计算每一个hi®</p><p>对于每一行，如果某一列中的元素为1,讲sig(i,c)置为sig(i,c)和hi®之间的最小值，如果为0,则不进行操作</p><p>LSH 局部敏感性哈希算法：</p><p>如果有很多篇文章，那么如果要找出相似度很高的文档，我们两两比较，要比较的次数很多</p><p>讲矩阵分成很多个行条，每个行条会存在一个桶数组，如果再这个行条中集合a和集合b相似，将他们放在一个桶中，对于所有行条都不会存在一个桶中的集合，不在比较它们的相似度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;jaccard相似度：用来描述两个集合间的相似度&lt;/p&gt;
&lt;p&gt;jaccard(A，B) = (A^B)/(AUB)，即A与B交集的元素个数除以A与B并集的元素个数&lt;/p&gt;
&lt;p&gt;K-single: 假如我们把一篇文章看成一个长的字符串，那么k-single就是这篇文章中长</summary>
      
    
    
    
    <category term="杂项内容学习" scheme="http://119.29.194.249/categories/%E6%9D%82%E9%A1%B9%E5%86%85%E5%AE%B9%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="大数据" scheme="http://119.29.194.249/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="Hash" scheme="http://119.29.194.249/tags/Hash/"/>
    
  </entry>
  
  <entry>
    <title>acwing基础算法-单调栈/单调队列</title>
    <link href="http://119.29.194.249/2022/05/24/acwing%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    <id>http://119.29.194.249/2022/05/24/acwing%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E5%8D%95%E8%B0%83%E6%A0%88-%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/</id>
    <published>2022-05-24T09:05:31.000Z</published>
    <updated>2022-11-14T02:32:59.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单调栈"><a class="markdownIt-Anchor" href="#单调栈"></a> 单调栈</h3><p>用途：用于解决找到某一个数的左右端离他最近的比它小或者大的数</p><p><strong>例子：给定一个长度为 N 的整数数列，输出每个数左边第一个比它小的数，如果不存在则输出 −1。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] skt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">10</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">if</span>(t!=<span class="hljs-number">0</span>&amp;&amp;skt[t]&gt;=x) t--;<br>            <span class="hljs-keyword">if</span>(t!=<span class="hljs-number">0</span>) System.out.print(skt[t]+<span class="hljs-string">&quot; &quot;</span>);<br>           <span class="hljs-keyword">else</span> System.out.print(<span class="hljs-string">&quot;-1 &quot;</span>);<br>            skt[++t] = x; <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调队列"><a class="markdownIt-Anchor" href="#单调队列"></a> 单调队列</h3><p>用途: 用于解决找到一个滑动窗口中的最大值或者最小值</p><p><strong>例子： 给定一个大小为 n≤106n≤106 的数组。有一个大小为 kk 的滑动窗口，它从数组的最左边移动到最右边。你只能在窗口中看到 kk 个数字。每次滑动窗口向右移动一个位置。你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值.</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000009</span>;<br><span class="hljs-type">int</span> q[N];<br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">int</span> h = <span class="hljs-number">-1</span>, t = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n,k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(h&gt;=t&amp;&amp;i-k+<span class="hljs-number">1</span>&gt;q[t]) t++;<br>        <span class="hljs-keyword">while</span>(h&gt;=t&amp;&amp;a[q[h]]&gt;=a[i]) h--;<br>        q[++h] = i;<br>        <span class="hljs-keyword">if</span>(i&gt;=k<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[q[t]]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    h = <span class="hljs-number">-1</span>;<br>    t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(h&gt;=t&amp;&amp;i-k+<span class="hljs-number">1</span>&gt;q[t]) t++;<br>        <span class="hljs-keyword">while</span>(h&gt;=t&amp;&amp;a[q[h]]&lt;=a[i]) h--;<br>        q[++h] = i;<br>        <span class="hljs-keyword">if</span>(i&gt;=k<span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[q[t]]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;单调栈&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#单调栈&quot;&gt;&lt;/a&gt; 单调栈&lt;/h3&gt;
&lt;p&gt;用途：用于解决找到某一个数的左右端离他最近的比它小或者大的数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子：给定一个长度为 N 的整数数列，输出每个</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="单调栈" scheme="http://119.29.194.249/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
    <category term="单调队列" scheme="http://119.29.194.249/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>acwing基础算法高精度加减乘除</title>
    <link href="http://119.29.194.249/2022/05/13/acwing%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/"/>
    <id>http://119.29.194.249/2022/05/13/acwing%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4/</id>
    <published>2022-05-13T10:54:09.000Z</published>
    <updated>2022-11-14T02:32:59.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高精度加减乘除"><a class="markdownIt-Anchor" href="#高精度加减乘除"></a> 高精度加减乘除</h2><h4 id="高精度加法两大大整数相加"><a class="markdownIt-Anchor" href="#高精度加法两大大整数相加"></a> 高精度加法，两大大整数相加</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.lang.StringBuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">add</span><span class="hljs-params">(StringBuilder A,StringBuilder B)</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>;i&lt;A.length()||i&lt;B.length()||t!=<span class="hljs-number">0</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i&lt;A.length()) t += A.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(i&lt;B.length()) t += B.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            res.append(t%<span class="hljs-number">10</span>);<br>            t /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.reverse().toString();<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>         <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextLine(), b = sc.nextLine();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(a);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(b);<br>        A = A.reverse();<br>        B = B.reverse();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> add(A,B);<br>        System.out.println(res);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高精度减法两个大整数相减"><a class="markdownIt-Anchor" href="#高精度减法两个大整数相减"></a> 高精度减法，两个大整数相减</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.lang.StringBuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">ifBig</span><span class="hljs-params">(String a,String b)</span>&#123;<br>        <span class="hljs-keyword">if</span>(a.length()!=b.length()) <span class="hljs-keyword">return</span> a.length()&gt;b.length();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length();i++)&#123;<br>            <span class="hljs-keyword">if</span>(a.charAt(i)!=b.charAt(i)) <span class="hljs-keyword">return</span> a.charAt(i)&gt;b.charAt(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">sub</span><span class="hljs-params">(StringBuilder A,StringBuilder B)</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,t = <span class="hljs-number">0</span>;i&lt;A.length();i++)&#123;<br>            <span class="hljs-keyword">if</span>(i&lt;B.length()) t -= B.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            t += A.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            res.append((t+<span class="hljs-number">10</span>)%<span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">if</span>(t&lt;<span class="hljs-number">0</span>) t = -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>        &#125;<br>        res = res.reverse();<br>        <span class="hljs-comment">//去除前导零</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;res.length()-<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(res.charAt(l)!=<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        l++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.substring(l).toString();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextLine(), b = sc.nextLine();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(a);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">B</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(b);<br>        A = A.reverse();<br>        B = B.reverse();<br>        <span class="hljs-keyword">if</span>(ifBig(a,b))&#123;<br>         <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> sub(A,B);<br>        System.out.println(res);   <br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            System.out.print(<span class="hljs-string">&quot;-&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> sub(B,A);<br>        System.out.println(res);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高精度乘法一个大整数乘以一个小整数"><a class="markdownIt-Anchor" href="#高精度乘法一个大整数乘以一个小整数"></a> 高精度乘法，一个大整数乘以一个小整数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.lang.StringBuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">mult</span><span class="hljs-params">(StringBuilder A,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>;i&lt;A.length()||t!=<span class="hljs-number">0</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i&lt;A.length()) t += (A.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>)*b;<br>            res.append(t%<span class="hljs-number">10</span>);<br>            t /= <span class="hljs-number">10</span>;<br>        &#125;<br>        res = res.reverse();<br>        <span class="hljs-comment">// 处理前导零</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;res.length()-<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(res.charAt(l)!=<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        l++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.substring(l).toString();<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(a);<br>        A = A.reverse();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> mult(A,b);<br>        System.out.println(res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高精度除法大整数除以小整数"><a class="markdownIt-Anchor" href="#高精度除法大整数除以小整数"></a> 高精度除法，大整数除以小整数</h4><p><strong>r为余数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.lang.String;<br><span class="hljs-keyword">import</span> java.lang.StringBuilder;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> r;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">div</span><span class="hljs-params">(String a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;a.length();i++)&#123;<br>            r = r*<span class="hljs-number">10</span> + a.charAt(i)-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            res.append(r/b);<br>            r %= b;<br>        &#125;<br>        <span class="hljs-comment">// 处理前导零</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;res.length()-<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(res.charAt(l)!=<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        l++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.substring(l).toString();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextLine();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> div(a,b);<br>        System.out.println(res);<br>        System.out.println(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;高精度加减乘除&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#高精度加减乘除&quot;&gt;&lt;/a&gt; 高精度加减乘除&lt;/h2&gt;
&lt;h4 id=&quot;高精度加法两大大整数相加&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#高精</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="高精度" scheme="http://119.29.194.249/tags/%E9%AB%98%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>acwing01算法基础-二分</title>
    <link href="http://119.29.194.249/2022/05/12/acwing01%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E4%BA%8C%E5%88%86/"/>
    <id>http://119.29.194.249/2022/05/12/acwing01%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E4%BA%8C%E5%88%86/</id>
    <published>2022-05-12T12:01:39.000Z</published>
    <updated>2022-11-14T02:32:59.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今天一起来二分吧"><a class="markdownIt-Anchor" href="#今天一起来二分吧"></a> 今天，一起来二分吧！</h2><p><img src="/2022/05/12/acwing01%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80-%E4%BA%8C%E5%88%86/image-20220512173535335.png" alt="image-20220512173535335"></p><p><strong>二分的思想:</strong><br>二分的思想并不是为了解决在顺序列表中查找某个值，而是寻找边界情况</p><p>对于一个区间或者一些数据，有一些数据满足某个性质，剩下的数据不满足这个性质，二分可以找到他们这两部分之间的边界值。</p><h4 id="整数二分"><a class="markdownIt-Anchor" href="#整数二分"></a> 整数二分</h4><p><strong>1.寻找左边界</strong></p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">searchLeft</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span>[] nums)</span>&#123;<br><span class="hljs-keyword">while</span>(l&lt;r)&#123;<br><span class="hljs-comment">// +1的原因在于一些死循环情况</span><br><span class="hljs-type">int</span> mid = l+r+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-comment">// check mid 表示判断mid这个点是否满足左区间的性质，满足返回true</span><br><span class="hljs-keyword">if</span>(check(mid)) l = mid;<br><span class="hljs-keyword">else</span> r = mid<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 注意，如果需要找的值在nums中，那么必然能找到，如果不在，跳出循环后l所表示的是最开始不满足左区间性质的那个值，对于查找顺序来说，l位置的值表示的是&gt;x(所要寻找的值)的第一个值</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">searchRight</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span>[] nums)</span>&#123;<br><span class="hljs-keyword">while</span>(l&lt;r)&#123;<br> <span class="hljs-type">int</span> mid = l+r&gt;&gt;<span class="hljs-number">1</span>;<br> <span class="hljs-keyword">if</span>(check(mid)) r = mid;<br> <span class="hljs-keyword">else</span> l = mid  + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.实战演练</strong></p><p><a href="https://www.acwing.com/problem/content/description/791/">acwing789</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">9</span>;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> arr[N];<br><span class="hljs-type">int</span> qu[N];<br><span class="hljs-type">int</span> q;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check1</span><span class="hljs-params">(<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(arr[mid]&lt;=k) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check2</span><span class="hljs-params">(<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(arr[mid]&gt;=k) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//  当前找到的是右边界</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search_Left</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>        <span class="hljs-type">int</span> mid = l+r+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check1</span>(mid,k)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-comment">// 当前找到的是左边界</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search_Right</span><span class="hljs-params">(<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>        <span class="hljs-type">int</span> mid = l+r&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check2</span>(mid,k)) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;qu[i]);<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;q;i++)&#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-built_in">search_Left</span>(qu[i],<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>        <span class="hljs-type">int</span> r = <span class="hljs-built_in">search_Right</span>(qu[i],<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(arr[r]!=qu[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1 -1\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,r,l);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt(),q = sc.nextInt();<br>        <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) p[i] = sc.nextInt();<br>        <span class="hljs-keyword">while</span>(q--&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-comment">// System.out.println(x);</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = n-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l+r&gt;&gt;<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(p[mid]&gt;=x) r = mid;<br>                <span class="hljs-keyword">else</span> l = mid+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(p[l]!=x) System.out.println(<span class="hljs-string">&quot;-1 -1&quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                System.out.print(l+<span class="hljs-string">&quot; &quot;</span>);<br>                l = <span class="hljs-number">0</span>; r = n-<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(l&lt;r)&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l+r+<span class="hljs-number">1</span> &gt;&gt;<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span>(p[mid]&lt;=x) l = mid;<br>                    <span class="hljs-keyword">else</span> r = mid-<span class="hljs-number">1</span>;<br>                &#125;<br>                System.out.println(r);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="浮点二分"><a class="markdownIt-Anchor" href="#浮点二分"></a> 浮点二分</h4><p>浮点二分的主要思路在于，分到最后小于某一个精度，就找到了答案</p><p><a href="https://www.acwing.com/activity/content/problem/content/824/">acwing790</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">double</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;n);<br>    <span class="hljs-comment">// 判断是否大于0</span><br>    <span class="hljs-type">double</span> l,r;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">-1</span>)&#123;<br>            l = <span class="hljs-number">-1</span>;<br>            r = <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = n;<br>            r = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">1</span>)&#123;<br>            l = <span class="hljs-number">0</span>;<br>            r = <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l = <span class="hljs-number">0</span>;<br>            r = n;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">while</span>((r-l)&gt;<span class="hljs-number">1e-8</span>)&#123;<br>        <span class="hljs-type">double</span> mid = (l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(mid*mid*mid&gt;n) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br>    <br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,l);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.lang.String;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextDouble();<br>        <span class="hljs-type">double</span> l,r;<br>        <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(n&gt;-<span class="hljs-number">1</span>)&#123;<br>                l = -<span class="hljs-number">1</span>;<br>                r = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l = n;<br>                r = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">1</span>)&#123;<br>                l = <span class="hljs-number">0</span>;<br>                r = <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                l = <span class="hljs-number">0</span>;<br>                r = n;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>((r-l)&gt;<span class="hljs-number">1e-9</span>)&#123;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l+r)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(mid*mid*mid&lt;n) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> String .format(<span class="hljs-string">&quot;%.6f&quot;</span>,l);<br>        System.out.println( result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;今天一起来二分吧&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#今天一起来二分吧&quot;&gt;&lt;/a&gt; 今天，一起来二分吧！&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/2022/05/12/acwing01%E7%AE%97%E6%B3%95%E5%</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="二分" scheme="http://119.29.194.249/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>acwing算法基础课01-快排归并</title>
    <link href="http://119.29.194.249/2022/05/11/acwing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE01-%E5%BF%AB%E6%8E%92%E5%BD%92%E5%B9%B6/"/>
    <id>http://119.29.194.249/2022/05/11/acwing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE01-%E5%BF%AB%E6%8E%92%E5%BD%92%E5%B9%B6/</id>
    <published>2022-05-11T15:17:05.000Z</published>
    <updated>2022-11-14T02:32:59.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="acwing-算法基础01"><a class="markdownIt-Anchor" href="#acwing-算法基础01"></a> acwing 算法基础01</h2><h4 id="快排与归并排序"><a class="markdownIt-Anchor" href="#快排与归并排序"></a> 快排与归并排序</h4><p><strong>快排思想</strong>：<code>分治</code></p><p>快排的处理步骤：</p><ul><li>1.设定一个分界点m</li><li>2.调整区间，使得左边的部分小于等于这个分界点m，右边的部分大于等于这个分界点</li><li>3.递归调节左右两个区间</li></ul><p>模板：</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>+<span class="hljs-number">9</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> p[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> c = p[(l+r)&gt;&gt;<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 为什么r与j不是l和r呢，因为使用了do while结构，需要先进行操作</span><br>    <span class="hljs-type">int</span> i=l<span class="hljs-number">-1</span>,j=r+<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 为什么使用do while结构，因为我们要注意p[i]=c的情况，do while结构会先操作，不会出现卡死再这里</span><br>    <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>        <span class="hljs-keyword">do</span>&#123;<br>            i++;<br>        &#125;<span class="hljs-keyword">while</span>(p[i]&lt;c);<br>        <span class="hljs-keyword">do</span>&#123;<br>            j--;<br>        &#125;<span class="hljs-keyword">while</span>(p[j]&gt;c);<br>        <span class="hljs-keyword">if</span>(i&lt;j) <span class="hljs-built_in">swap</span>(p[i],p[j]);<br>    &#125;<br>    <span class="hljs-comment">// 注意边界问题，这里j结束循环，j所指向的是小于c的，所以j左边的必然小于c</span><br>    <span class="hljs-built_in">quickSort</span>(l,j);<br>    <span class="hljs-built_in">quickSort</span>(j+<span class="hljs-number">1</span>,r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p[i]);<br>    <span class="hljs-built_in">quickSort</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p[i]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span>[] p)</span>&#123;<br>        <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> p[(l+r)&gt;&gt;<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> i=l-<span class="hljs-number">1</span>,j=r+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;j)&#123;<br>            <span class="hljs-keyword">do</span>&#123;<br>                i++;<br>            &#125;<span class="hljs-keyword">while</span>(p[i]&lt;c);<br>            <span class="hljs-keyword">do</span>&#123;<br>                j--;<br>            &#125;<span class="hljs-keyword">while</span>(p[j]&gt;c);<br>            <span class="hljs-keyword">if</span>(i&lt;j)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> p[i];<br>                p[i] = p[j];<br>                p[j] = temp;<br>            &#125;<br>        &#125;<br>        quickSort(l,j,p);<br>        quickSort(j+<span class="hljs-number">1</span>,r,p);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) p[i] = sc.nextInt();<br>        quickSort(<span class="hljs-number">0</span>,n-<span class="hljs-number">1</span>,p);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) System.out.print(p[i]+<span class="hljs-string">&#x27; &#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>归并排序思想</strong>:分治</p><p>归并排序步骤</p><ul><li>1.找到中间位置，<code>(l+r)&gt;&gt;1</code></li><li>2.对左边的部分进行排序，对右边的部分进行排序</li><li>3.将左右两个区间进行合并</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">9</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> p[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l+r&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">mergeSort</span>(l,mid);<br>    <span class="hljs-built_in">mergeSort</span>(mid+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-type">int</span> temp[r-l+<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> i=l,j=mid+<span class="hljs-number">1</span>,k=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<br>        temp[k++] = p[i]&gt;p[j]?p[j++]:p[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;=mid)&#123;<br>        temp[k++] = p[i++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(j&lt;=r)&#123;<br>        temp[k++] = p[j++];<br>    &#125;<br>    i = l;<br>    k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=r)&#123;<br>        p[i++] = temp[k++];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p[i]);<br>    <span class="hljs-built_in">mergeSort</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p[i]);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span>[] q)</span>&#123;<br>        <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l+r)&gt;&gt;<span class="hljs-number">1</span>;<br>        mergeSort(l,mid,q);<br>        mergeSort(mid+<span class="hljs-number">1</span>,r,q);<br>        <span class="hljs-comment">// 进行归并排序</span><br>        <span class="hljs-type">int</span>[] temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[r-l+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l,j = mid+<span class="hljs-number">1</span>;<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)&#123;<br>            temp[k++] = q[i]&gt;q[j]?q[j++]:q[i++];<br>        &#125;<br>        <span class="hljs-keyword">while</span>(i&lt;=mid)&#123;<br>            temp[k++] = q[i++];<br>        &#125;<br>        <span class="hljs-keyword">while</span>(j&lt;=r)&#123;<br>            temp[k++] = q[j++];<br>        &#125;<br>        i = l;<br>        k = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;=r)&#123;<br>            q[i++]=temp[k++];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            q[i] = sc.nextInt();<br>        &#125;<br>        mergeSort(<span class="hljs-number">0</span>,n-<span class="hljs-number">1</span>,q);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            System.out.print(q[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;acwing-算法基础01&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#acwing-算法基础01&quot;&gt;&lt;/a&gt; acwing 算法基础01&lt;/h2&gt;
&lt;h4 id=&quot;快排与归并排序&quot;&gt;&lt;a class=&quot;markdownIt-Anch</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="基础算法" scheme="http://119.29.194.249/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    <category term="快排" scheme="http://119.29.194.249/tags/%E5%BF%AB%E6%8E%92/"/>
    
    <category term="归并" scheme="http://119.29.194.249/tags/%E5%BD%92%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>前缀树模板</title>
    <link href="http://119.29.194.249/2022/05/09/%E5%89%8D%E7%BC%80%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
    <id>http://119.29.194.249/2022/05/09/%E5%89%8D%E7%BC%80%E6%A0%91%E6%A8%A1%E6%9D%BF/</id>
    <published>2022-05-09T10:23:58.000Z</published>
    <updated>2022-11-14T02:32:59.808Z</updated>
    
    <content type="html"><![CDATA[<p>第一种表示方式，数组</p><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> Trie &#123;<br>    <span class="hljs-type">int</span> N = <span class="hljs-number">1000009</span>;<br>    <span class="hljs-type">int</span>[][] trie;<br>    <span class="hljs-type">int</span>[] count;<br>    <span class="hljs-type">int</span> <span class="hljs-keyword">index</span>;<br>    <span class="hljs-built_in">public</span> Trie() &#123;<br>        trie = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[N][<span class="hljs-number">26</span>];<br>        count = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[N];<br>        <span class="hljs-keyword">index</span> = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">insert</span>(String word) &#123;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;word.length();i++)&#123;<br>            <span class="hljs-type">int</span> u = word.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(trie[p][u]==<span class="hljs-number">0</span>) trie[p][u] = ++<span class="hljs-keyword">index</span>;<br>            p = trie[p][u];<br>        &#125;<br>        count[p]++;<br>    &#125;<br>    <br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> <span class="hljs-keyword">search</span>(String word) &#123;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;word.length();i++)&#123;<br>            <span class="hljs-type">int</span> u = word.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(trie[p][u]==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            p = trie[p][u];<br>        &#125;<br>        <span class="hljs-keyword">return</span> count[p]!=<span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">public</span> <span class="hljs-type">boolean</span> startsWith(String prefix) &#123;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;prefix.length();i++)&#123;<br>            <span class="hljs-type">int</span> u = prefix.charAt(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(trie[p][u]==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            p = trie[p][u];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种表示方式：链表</p> <figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs arduino"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>&#123;<br>    <span class="hljs-type">boolean</span> end;<br>    TreeNode[] tries = <span class="hljs-keyword">new</span> TreeNode[<span class="hljs-number">26</span>];<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    TreeNode root;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Trie</span><span class="hljs-params">()</span> </span>&#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">String</span> <span class="hljs-type">word</span>)</span> </span>&#123;<br>        TreeNode p = root;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-type">word</span>.<span class="hljs-built_in">length</span>();i++)&#123;<br>            <span class="hljs-type">int</span> u = <span class="hljs-type">word</span>.<span class="hljs-built_in">charAt</span>(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(p.tries[u]==null) p.tries[u] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>();<br>            p = p.tries[u];<br>        &#125;<br>        p.end = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">String</span> <span class="hljs-type">word</span>)</span> </span>&#123;<br>        TreeNode p = root;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-type">word</span>.<span class="hljs-built_in">length</span>();i++)&#123;<br>            <span class="hljs-type">int</span> u = <span class="hljs-type">word</span>.<span class="hljs-built_in">charAt</span>(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(p.tries[u]==null) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            p = p.tries[u];<br>        &#125;<br>        <span class="hljs-keyword">return</span> p.end;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(<span class="hljs-type">String</span> prefix)</span> </span>&#123;<br>        TreeNode p = root;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;prefix.<span class="hljs-built_in">length</span>();i++)&#123;<br>            <span class="hljs-type">int</span> u = prefix.<span class="hljs-built_in">charAt</span>(i)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(p.tries[u]==null) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            p = p.tries[u];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一种表示方式，数组&lt;/p&gt;
&lt;figure class=&quot;highlight pgsql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;code-wrapper&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="前缀树" scheme="http://119.29.194.249/tags/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>并查集模板</title>
    <link href="http://119.29.194.249/2022/05/05/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://119.29.194.249/2022/05/05/%E5%B9%B6%E6%9F%A5%E9%9B%86/</id>
    <published>2022-05-05T00:54:00.000Z</published>
    <updated>2022-11-14T02:32:59.807Z</updated>
    
    <content type="html"><![CDATA[<p>并查集</p><figure class="highlight gradle"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><pre><code class="hljs gradle"><br><span class="hljs-keyword">class</span> UF&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] parents;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] <span class="hljs-keyword">size</span>;<br><span class="hljs-keyword">public</span> UF(<span class="hljs-keyword">int</span> n)&#123;<br>parents = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br><span class="hljs-keyword">size</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br><span class="hljs-keyword">count</span> = n;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>parents[i] = i;<br><span class="hljs-keyword">size</span>[i] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> union(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> q)&#123;<br><span class="hljs-keyword">int</span> rootP = <span class="hljs-keyword">find</span>(p);<br><span class="hljs-keyword">int</span> rootQ = <span class="hljs-keyword">find</span>(q);<br><span class="hljs-keyword">if</span>(rootP==rootQ) <span class="hljs-keyword">return</span>;<br><span class="hljs-comment">// 否则将其中一个节点的根结点的父节点变成另一个节点的根节点</span><br>parents[rootP] = rootQ;<br><span class="hljs-keyword">size</span>[rootQ] += <span class="hljs-keyword">size</span>[rootP];<br><span class="hljs-keyword">count</span>--;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> connect(<span class="hljs-keyword">int</span> p,<span class="hljs-keyword">int</span> q)&#123;<br><span class="hljs-keyword">int</span> rootP = <span class="hljs-keyword">find</span>(p);<br><span class="hljs-keyword">int</span> rootQ = <span class="hljs-keyword">find</span>(q);<br><span class="hljs-keyword">return</span> rootP==rootQ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">find</span>(<span class="hljs-keyword">int</span> x)&#123;<br><span class="hljs-comment">// 找到当前节点的根节点</span><br><span class="hljs-keyword">while</span>(parents[x]!=x)&#123;<br><span class="hljs-comment">// 找到x的父节点，父节点找到自己的父节点，最后找到这棵树的头，把x接到这个头结点的地方</span><br>x = <span class="hljs-keyword">find</span>(parents[x]);<br>&#125;<br><span class="hljs-keyword">return</span> parents[x];<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> getMaxSize()&#123;<br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i:<span class="hljs-keyword">size</span>)&#123;<br>res = Math.max(res,i);<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> getCount()&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">count</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;并查集&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;div class=&quot;code-wrapper&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="并查集" scheme="http://119.29.194.249/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>证明图的后序遍历的逆序是拓扑排序</title>
    <link href="http://119.29.194.249/2022/05/04/%E8%AF%81%E6%98%8E%E5%9B%BE%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%80%86%E5%BA%8F%E6%98%AF%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>http://119.29.194.249/2022/05/04/%E8%AF%81%E6%98%8E%E5%9B%BE%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%80%86%E5%BA%8F%E6%98%AF%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</id>
    <published>2022-05-04T02:33:32.000Z</published>
    <updated>2022-11-14T02:32:59.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="证明对于图的后序遍历的逆序是拓扑排序"><a class="markdownIt-Anchor" href="#证明对于图的后序遍历的逆序是拓扑排序"></a> 证明：对于图的后序遍历的逆序是拓扑排序？</h2><h6 id="前提我们需要保证这个图是可以进行拓扑排序的"><a class="markdownIt-Anchor" href="#前提我们需要保证这个图是可以进行拓扑排序的"></a> 前提：我们需要保证，这个图是可以进行拓扑排序的</h6><p>即这个图中不存在环，并且是有向图</p><h3 id="1什么是图的后序遍历"><a class="markdownIt-Anchor" href="#1什么是图的后序遍历"></a> 1.什么是图的后序遍历</h3><p>我们知道二叉树的后序遍历：</p><figure class="highlight scss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">traverse</span>(TreeNode root)&#123;<br><span class="hljs-built_in">if</span>(root==null) return;<br><span class="hljs-built_in">traverse</span>(root.left);<br><span class="hljs-built_in">traverse</span>(root.right);<br><span class="hljs-comment">//后序遍历位置</span><br>&#125;<br></code></pre></td></tr></table></figure><p>同理，对于图的后序遍历可以这样表示</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">traverse</span>(List&lt;Integer&gt;[] graph,int s)&#123;<br><span class="hljs-built_in">if</span>(visit[s]) return;<br><span class="hljs-built_in">for</span>(int v:graph[s])&#123;<br><span class="hljs-built_in">traverse</span>(graph,v);<br>&#125;<br><span class="hljs-comment">//后序遍历位置</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2图的后序遍历特点"><a class="markdownIt-Anchor" href="#2图的后序遍历特点"></a> 2.图的后序遍历特点</h3><p>在上面，我们知道了后序遍历的大致实现方式，也就是对于一个节点，我们遍历完所有的它的相邻节点后，再进行相应的操作</p><p>以下图分析</p><p><img src="/2022/05/04/%E8%AF%81%E6%98%8E%E5%9B%BE%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%80%86%E5%BA%8F%E6%98%AF%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/image-20220504101001881.png" alt="image-20220504101001881"></p><p>显然上图是一个有向图，并且无环，满足题意</p><p>对于上图的后序遍历，它的遍历的顺序为3,2,4,1</p><p>3节点是最先遍历到的点，它的特点有什么呢？</p><p>3节点没有出度，即到3节点的时候，它没有后序可遍历的节点了</p><p>3节点遍历完之后，由于没有后序节点遍历之后，那么会返回到上一级，那么它的上一级是谁?</p><p>有可能是1，也有可能是2，也有可能是4</p><p>如果是1，那么1还有后序节点未遍历，后序节点为2</p><p>如果是4，4也有后序节点未遍历，后序节点为2</p><p>如果是2，2没有后序节点了，所以2被遍历</p><p>以上步骤重复。。。。</p><p>我们注意到，当它被遍历，即被打印的时候，此时，它没有后序节点可以被遍历了，也就是说它没有出度了</p><h3 id="3为什么后序遍历的逆序是拓扑排序"><a class="markdownIt-Anchor" href="#3为什么后序遍历的逆序是拓扑排序"></a> 3.为什么后序遍历的逆序是拓扑排序?</h3><p>拓扑排序的步骤是，找到一个没有入度的节点，打印自己，然后删掉自身节点及相连的边，再重复操作</p><p>我们注意上面的后序遍历时节点被打印的时候，是自身没有出度了，那么它们之间是否顺序相反？</p><p>答案是它们是相反的。</p><p>我们还通过上图进行证明：（反证法）</p><p><code>3、2、4、1</code>是它的后序遍历结果，所以它的逆序为<code>1、4、2、3</code></p><p>我们假设从2节点开始，遍历结果是错的</p><p>那么正确的应该是<code>1、4、3、2</code></p><p>既然<code>2、3</code>是错的，必然<code>3节点----&gt;2节点</code>，如下图所示，否则，<code>1、4、2、3</code>也是正确的(对于拓扑排序来说)</p><p><img src="/2022/05/04/%E8%AF%81%E6%98%8E%E5%9B%BE%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E9%80%86%E5%BA%8F%E6%98%AF%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/image-20220504102035444.png" alt="image-20220504102035444"></p><p>显然这个图已经变了，也就是说<code>3、2、4、1</code>的后序遍历结果的逆序是正确的。</p><h3 id="4证明"><a class="markdownIt-Anchor" href="#4证明"></a> 4.证明</h3><p>那么推广一下，假设某图的后序遍历结果的逆序为<code>（i,i+1,i+2,.....,j,j+1,j+2,....）</code></p><p>假设从<code>j</code>节点遍历结果是错的，那么必然存在一个节点<code>k(k的后序遍历结果的位置在j后面)</code>，<code>k</code>节点有边连接到<code>j</code>，<code>k----&gt;j</code></p><p>所以假设错误，也就是说对于任意一个节点，这个假设都是错的，所以图的后序遍历的逆序是拓扑排序</p><p>证明结束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;证明对于图的后序遍历的逆序是拓扑排序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#证明对于图的后序遍历的逆序是拓扑排序&quot;&gt;&lt;/a&gt; 证明：对于图的后序遍历的逆序是拓扑排序？&lt;/h2&gt;
&lt;h6 id=&quot;前提我们需要保证这个图是可以进行拓</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图" scheme="http://119.29.194.249/tags/%E5%9B%BE/"/>
    
    <category term="拓扑排序" scheme="http://119.29.194.249/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>AcWing周赛47</title>
    <link href="http://119.29.194.249/2022/04/16/AcWing%E5%91%A8%E8%B5%9B47/"/>
    <id>http://119.29.194.249/2022/04/16/AcWing%E5%91%A8%E8%B5%9B47/</id>
    <published>2022-04-16T12:06:56.000Z</published>
    <updated>2022-11-14T02:32:59.787Z</updated>
    
    <content type="html"><![CDATA[<p>1.数字母的题目<a href="https://www.acwing.com/problem/content/4402/">4399</a><br>没什么坑，每个元素都是小写字母，比较简单的方法可以用个大小26的数组，然后有了就加1<br>最后查看有多少个不为0的</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>        <span class="hljs-type">char</span>[] arrs = s.toCharArray();<br>        Set&lt;Character&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arrs.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(arrs[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;arrs[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>)&#123;<br>                set.add(arrs[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(set.size());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.链表使用题<a href="https://www.acwing.com/problem/content/4403/">4400</a><br>主要是通过改变开始位置进行操作<br>我有点傻了，最开始还自定义了一个链表进行遍历删除<br>其实直接用数组就行了，因为n不大，主要是计算开始位置，每次除余的时候需要加上这个开始位置</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Main &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Scanner scanner = <span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-type">int</span> n=scanner.nextInt(),k=scanner.nextInt();<br>        <span class="hljs-type">int</span>[] arrs = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[k];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            arrs[i] = scanner.nextInt();<br>        &#125;<br>//        使用LinkedList<br>        LinkedList&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-keyword">set</span> = <span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(i+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            <span class="hljs-type">int</span> length = arrs[i];<br>            <span class="hljs-type">int</span> size = <span class="hljs-keyword">set</span>.size();<br>            <span class="hljs-type">int</span> lmod = (length+<span class="hljs-keyword">start</span>)%size;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(<span class="hljs-keyword">set</span>.<span class="hljs-keyword">get</span>(lmod));<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot; &quot;);<br>            <span class="hljs-keyword">set</span>.remove(lmod);<br>//            更新一下<span class="hljs-keyword">start</span><br>            start = lmod;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.题目绕来绕去的一道数组题<a href="https://www.acwing.com/problem/content/4404/">4401</a><br>主要是通过a数组先算一个长度为n的x数组，然后通过比较x数组开始k长的部分和结尾k长的部分<br>判断是否可以用更小长度的数组进行表示</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Main &#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        Scanner scanner = <span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>        <span class="hljs-type">int</span> n = scanner.nextInt();<br>        <span class="hljs-type">int</span>[] arrs = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            arrs[i]=scanner.nextInt();<br>        &#125;<br><br>        <span class="hljs-type">int</span>[] srrs = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[n];<br>        srrs[<span class="hljs-number">0</span>] = arrs[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++)&#123;<br>            srrs[i] = arrs[i]-arrs[i<span class="hljs-number">-1</span>];<br>        &#125;<br>//        从后往前判断<br>        List&lt;<span class="hljs-type">Integer</span>&gt; list = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        list.<span class="hljs-keyword">add</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;<span class="hljs-number">0</span>;i<span class="hljs-comment">--)&#123;</span><br>            <span class="hljs-type">int</span> l = n-i;<br>            <span class="hljs-type">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123;<br>                <span class="hljs-keyword">if</span>(srrs[j]!=srrs[n-l+j])&#123;<br>                    flag = <span class="hljs-keyword">false</span>;<br>                    break;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag) list.<span class="hljs-keyword">add</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(list.size());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=list.size()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i<span class="hljs-comment">--)&#123;</span><br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(list.<span class="hljs-keyword">get</span>(i));<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(&quot; &quot;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.数字母的题目&lt;a href=&quot;https://www.acwing.com/problem/content/4402/&quot;&gt;4399&lt;/a&gt;&lt;br&gt;
没什么坑，每个元素都是小写字母，比较简单的方法可以用个大小26的数组，然后有了就加1&lt;br&gt;
最后查看有多少个不为0的&lt;/</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="周赛" scheme="http://119.29.194.249/tags/%E5%91%A8%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>删除链表的倒数第n个结点</title>
    <link href="http://119.29.194.249/2022/04/16/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>http://119.29.194.249/2022/04/16/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/</id>
    <published>2022-04-16T08:51:33.000Z</published>
    <updated>2022-11-14T02:32:59.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="力扣19题"><a class="markdownIt-Anchor" href="#力扣19题"></a> <a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">力扣19题</a></h3><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述：</h4><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><h4 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h4><figure class="highlight dns"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">1,2,3,4</span>,<span class="hljs-number">5</span>], n = <span class="hljs-number">2</span><br>输出：[<span class="hljs-number">1,2,3,5</span>]<br></code></pre></td></tr></table></figure><h4 id="java代码"><a class="markdownIt-Anchor" href="#java代码"></a> java代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        h.next = head;<br>        ListNode fastNode=head,slowNode=head,pre=h;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>            fastNode = fastNode.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(fastNode!=<span class="hljs-literal">null</span>)&#123;<br>            pre = slowNode;<br>            slowNode = slowNode.next;<br>            fastNode = fastNode.next;<br>        &#125;<br>        pre.next = slowNode.next;<br>        <span class="hljs-keyword">return</span> h.next;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h4><p>通过设置两个指针，先让fastNode走n步，然后让slowNode开始走，这样fastNode走到最后的时候<br>slowNode正好到需要删除的地方</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;力扣19题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#力扣19题&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/&quot;&gt;</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="http://119.29.194.249/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>两两交换链表中的结点</title>
    <link href="http://119.29.194.249/2022/04/16/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/"/>
    <id>http://119.29.194.249/2022/04/16/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/</id>
    <published>2022-04-16T08:46:09.000Z</published>
    <updated>2022-11-14T02:32:59.787Z</updated>
    
    <content type="html"><![CDATA[<h3 id="力扣24题"><a class="markdownIt-Anchor" href="#力扣24题"></a> <a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">力扣24题</a></h3><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述：</h4><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。<br><img src="/2022/04/16/%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/1.png" alt="1.png"></p><h4 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h4><figure class="highlight dns"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs dns">输入：head = [<span class="hljs-number">1,2,3,4</span>]<br>输出：[<span class="hljs-number">2,1,4,3</span>]<br></code></pre></td></tr></table></figure><h4 id="java代码"><a class="markdownIt-Anchor" href="#java代码"></a> java代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>||head.next==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-comment">// 先添加一个头节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>();<br>        h.next = head;<br>        ListNode pre=h;<br>        <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">null</span>&amp;&amp;head.next!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next.next;<br>            pre.next = head.next;<br>            head.next.next = head;<br>            head.next = temp;<br>            pre = head;<br>            head = pre.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> h.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;力扣24题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#力扣24题&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/swap-nodes-in-pairs/&quot;&gt;力扣24题&lt;/a&gt;&lt;/h3</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="http://119.29.194.249/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>反转链表</title>
    <link href="http://119.29.194.249/2022/04/16/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://119.29.194.249/2022/04/16/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2022-04-16T08:42:22.000Z</published>
    <updated>2022-11-14T02:32:59.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="力扣206题"><a class="markdownIt-Anchor" href="#力扣206题"></a> <a href="https://leetcode-cn.com/problems/reverse-linked-list/">力扣206题</a></h3><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述：</h4><p>给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</p><h4 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h4><figure class="highlight accesslog"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs accesslog">输入：head = <span class="hljs-string">[1,2,3,4,5]</span><br>输出：<span class="hljs-string">[5,4,3,2,1]</span><br></code></pre></td></tr></table></figure><h4 id="java代码"><a class="markdownIt-Anchor" href="#java代码"></a> java代码</h4><h5 id="递归写法"><a class="markdownIt-Anchor" href="#递归写法"></a> 递归写法</h5><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-operator">/**</span><br> <span class="hljs-operator">*</span> Definition <span class="hljs-keyword">for</span> singly<span class="hljs-operator">-</span>linked list.<br> <span class="hljs-operator">*</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> ListNode &#123;<br> <span class="hljs-operator">*</span>     int <span class="hljs-keyword">val</span>;<br> <span class="hljs-operator">*</span>     ListNode next;<br> <span class="hljs-operator">*</span>     ListNode() &#123;&#125;<br> <span class="hljs-operator">*</span>     ListNode(int <span class="hljs-keyword">val</span>) &#123; this.<span class="hljs-keyword">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">val</span>; &#125;<br> <span class="hljs-operator">*</span>     ListNode(int <span class="hljs-keyword">val</span>, ListNode next) &#123; this.<span class="hljs-keyword">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">val</span>; this.next <span class="hljs-operator">=</span> next; &#125;<br> <span class="hljs-operator">*</span> &#125;<br> <span class="hljs-operator">*/</span><br><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-keyword">public</span> ListNode reverseList(ListNode head) &#123;<br>        <span class="hljs-keyword">return</span> reverse(<span class="hljs-literal">null</span>,head);<br>    &#125;<br>    <span class="hljs-keyword">public</span> ListNode reverse(ListNode pre,ListNode cur)&#123;<br>        <span class="hljs-keyword">if</span>(cur<span class="hljs-operator">==</span><span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> pre;<br>        ListNode temp <span class="hljs-operator">=</span> cur.next;<br>        cur.next <span class="hljs-operator">=</span> pre;<br>        <span class="hljs-keyword">return</span> reverse(cur,temp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="非递归写法"><a class="markdownIt-Anchor" href="#非递归写法"></a> 非递归写法</h5><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-operator">/**</span><br> <span class="hljs-operator">*</span> Definition <span class="hljs-keyword">for</span> singly<span class="hljs-operator">-</span>linked list.<br> <span class="hljs-operator">*</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> ListNode &#123;<br> <span class="hljs-operator">*</span>     int <span class="hljs-keyword">val</span>;<br> <span class="hljs-operator">*</span>     ListNode next;<br> <span class="hljs-operator">*</span>     ListNode() &#123;&#125;<br> <span class="hljs-operator">*</span>     ListNode(int <span class="hljs-keyword">val</span>) &#123; this.<span class="hljs-keyword">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">val</span>; &#125;<br> <span class="hljs-operator">*</span>     ListNode(int <span class="hljs-keyword">val</span>, ListNode next) &#123; this.<span class="hljs-keyword">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">val</span>; this.next <span class="hljs-operator">=</span> next; &#125;<br> <span class="hljs-operator">*</span> &#125;<br> <span class="hljs-operator">*/</span><br><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-keyword">public</span> ListNode reverseList(ListNode head) &#123;<br>        <span class="hljs-keyword">if</span>(head<span class="hljs-operator">==</span><span class="hljs-literal">null</span><span class="hljs-operator">||</span>head.next<span class="hljs-operator">==</span><span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br>        ListNode pre,p;<br>        pre <span class="hljs-operator">=</span> head.next;<br>        p <span class="hljs-operator">=</span> head;<br>        p.next <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span>(pre<span class="hljs-operator">!=</span><span class="hljs-literal">null</span>)&#123;<br>            ListNode temp <span class="hljs-operator">=</span> pre.next;<br>            pre.next <span class="hljs-operator">=</span> p;<br>            p <span class="hljs-operator">=</span> pre;<br>            pre <span class="hljs-operator">=</span> temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;力扣206题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#力扣206题&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/reverse-linked-list/&quot;&gt;力扣206题&lt;/a&gt;&lt;</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="http://119.29.194.249/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>设计链表</title>
    <link href="http://119.29.194.249/2022/04/16/%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
    <id>http://119.29.194.249/2022/04/16/%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</id>
    <published>2022-04-16T08:39:25.000Z</published>
    <updated>2022-11-14T02:32:59.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="力扣707题"><a class="markdownIt-Anchor" href="#力扣707题"></a> <a href="https://leetcode-cn.com/problems/design-linked-list/">力扣707题</a></h3><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述：</h4><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。<br>在链表类中实现这些功能：<br>1.get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。<br>2.addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。<br>3.addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。<br>4.addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，5.则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。<br>6.deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</p><h4 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h4><figure class="highlight apache"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">MyLinkedList</span> linkedList = new MyLinkedList();<br><span class="hljs-attribute">linkedList</span>.addAtHead(<span class="hljs-number">1</span>);<br><span class="hljs-attribute">linkedList</span>.addAtTail(<span class="hljs-number">3</span>);<br><span class="hljs-attribute">linkedList</span>.addAtIndex(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);   //链表变为<span class="hljs-number">1</span>-&gt; <span class="hljs-number">2</span>-&gt; <span class="hljs-number">3</span><br><span class="hljs-attribute">linkedList</span>.get(<span class="hljs-number">1</span>);            //返回<span class="hljs-number">2</span><br><span class="hljs-attribute">linkedList</span>.deleteAtIndex(<span class="hljs-number">1</span>);  //现在链表是<span class="hljs-number">1</span>-&gt; <span class="hljs-number">3</span><br><span class="hljs-attribute">linkedList</span>.get(<span class="hljs-number">1</span>);            //返回<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="java代码"><a class="markdownIt-Anchor" href="#java代码"></a> java代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span>&#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode next;<br>    ListNode(<span class="hljs-type">int</span> val)&#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>    &#125;<br>    ListNode()&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br><br>    ListNode head;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(i==index) <span class="hljs-keyword">return</span> p.val;<br>            i++;<br>            p = p.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>)&#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>            temp.next = head;<br>            head = temp;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>) addAtHead(val);<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-keyword">while</span>(p.next!=<span class="hljs-literal">null</span>)&#123;<br>                p = p.next;<br>            &#125;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>            p.next = temp;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span>(index==<span class="hljs-number">0</span>)&#123;<br>            addAtHead(val);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> p;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">null</span>&amp;&amp;index&gt;<span class="hljs-number">0</span>)&#123;<br>            pre = p;<br>            p = p.next;<br>            index--;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(index!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">null</span>&amp;&amp;index==<span class="hljs-number">0</span>) addAtTail(val);<br>        <span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>            pre.next = temp;<br>            temp.next = p;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span>(index==<span class="hljs-number">0</span>) head = head.next;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> p;<br>            <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">null</span>&amp;&amp;index&gt;<span class="hljs-number">0</span>)&#123;<br>                pre = p;<br>                p = p.next;<br>                index--;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">null</span>)&#123;<br>                pre.next = pre.next.next;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your MyLinkedList object will be instantiated and called as such:</span><br><span class="hljs-comment"> * MyLinkedList obj = new MyLinkedList();</span><br><span class="hljs-comment"> * int param_1 = obj.get(index);</span><br><span class="hljs-comment"> * obj.addAtHead(val);</span><br><span class="hljs-comment"> * obj.addAtTail(val);</span><br><span class="hljs-comment"> * obj.addAtIndex(index,val);</span><br><span class="hljs-comment"> * obj.deleteAtIndex(index);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h4><p>展现链表基础知识和编程能力</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;力扣707题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#力扣707题&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://leetcode-cn.com/problems/design-linked-list/&quot;&gt;力扣707题&lt;/a&gt;&lt;/</summary>
      
    
    
    
    <category term="算法" scheme="http://119.29.194.249/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="链表" scheme="http://119.29.194.249/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
